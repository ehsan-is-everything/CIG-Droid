package ICFG;

/*******************************************************************************
 * Copyright (c) 2012 Secure Software Engineering Group at EC SPRIDE.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser Public License v2.1
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
 * 
 * Contributors: Christian Fritz, Steven Arzt, Siegfried Rasthofer, Eric
 * Bodden, and others.
 ******************************************************************************/

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;

import org.xmlpull.v1.XmlPullParserException;

import soot.MethodOrMethodContext;
import soot.Scene;
import soot.SootMethod;
import soot.jimple.infoflow.android.SetupApplication;
import soot.jimple.infoflow.results.InfoflowResults;
import soot.jimple.infoflow.taintWrappers.EasyTaintWrapper;
import soot.jimple.toolkits.callgraph.CallGraph;
import soot.jimple.toolkits.callgraph.Edge;
import soot.util.dot.DotGraph;
import soot.util.queue.QueueReader;

public class ExtractCFG {

	private static SetupApplication setupApplication;

	/**
	 * Analyzes the given APK file for data flows
	 * 
	 * @param fileName
	 *            The full path and file name of the APK file to analyze
	 * @return The data leaks found in the given APK file
	 * @throws IOException
	 *             Thrown if the given APK file or any other required file could not
	 *             be found
	 * @throws XmlPullParserException
	 *             Thrown if the Android manifest file could not be read.
	 */
	public static CallGraph analyzeAPKFile(String fileName, String androidJar)
			throws IOException, XmlPullParserException {
		return analyzeAPKFile(fileName, androidJar, false, true, false);
	}

	/**
	 * Analyzes the given APK file for data flows
	 * 
	 * @param fileName
	 *            The full path and file name of the APK file to analyze
	 * @param enableImplicitFlows
	 *            True if implicit flows shall be tracked, otherwise false
	 * @param enableStaticFields
	 *            True if taints in static fields shall be tracked, otherwise false
	 * @param flowSensitiveAliasing
	 *            True if a flow-sensitive alias analysis shall be used, otherwise
	 *            false
	 * @return The data leaks found in the given APK file
	 * @throws IOException
	 *             Thrown if the given APK file or any other required file could not
	 *             be found
	 * @throws XmlPullParserException
	 *             Thrown if the Android manifest file could not be read.
	 */
	public static CallGraph analyzeAPKFile(String fileName, String androidJars, boolean enableImplicitFlows,
			boolean enableStaticFields, boolean flowSensitiveAliasing) throws IOException, XmlPullParserException {

		if (androidJars == null)
			androidJars = System.getProperty("ANDROID_JARS");
		if (androidJars == null)
			throw new RuntimeException("Android JAR dir not set");
		System.out.println("Loading Android.jar files from " + androidJars);

		setupApplication = new SetupApplication(androidJars, fileName);

		// Find the taint wrapper file
		File taintWrapperFile = new File("EasyTaintWrapperSource.txt");
		if (!taintWrapperFile.exists())
			taintWrapperFile = new File("../soot-infoflow/EasyTaintWrapperSource.txt");
		setupApplication.setTaintWrapper(new EasyTaintWrapper(taintWrapperFile));

		// Configure the analysis
		setupApplication.getConfig().setEnableImplicitFlows(enableImplicitFlows);
		setupApplication.getConfig().setEnableStaticFieldTracking(enableStaticFields);
		setupApplication.getConfig().setFlowSensitiveAliasing(flowSensitiveAliasing);
		setupApplication.constructCFG();
		// InfoflowResults res = setupApplication.runInfoflow("SourcesAndSinks.txt");
		// System.out.println(res.size());
		// res.printResultsToConsole();
		return Scene.v().getCallGraph();

	}

	public static SootMethod getEntryPoint() {
		return setupApplication.getDummyMainMethod();
	}

	public static void printDummyMain() {
		System.out.println(setupApplication.getDummyMainMethod().getActiveBody().toString());
	}

	public static void serializeDummyMain(String fileAddress) throws FileNotFoundException {
		PrintStream out = new PrintStream(new FileOutputStream(fileAddress));
		out.print(setupApplication.getDummyMainMethod().getActiveBody().toString());
		//System.out.println(setupApplication.getDummyMainMethod().getActiveBody().toString());
		out.close();
	}

	public static File serializeCallGraph(CallGraph graph, int ID, String fileName) {
		if (fileName == null) {
			fileName = soot.SourceLocator.v().getOutputDir();
			if (fileName.length() > 0) {
				fileName = fileName + java.io.File.separator;
			}
			fileName = fileName + "call-graph" + ID + DotGraph.DOT_EXTENSION;
		}
		DotGraph canvas = new DotGraph("call-graph");
		QueueReader<Edge> listener = graph.listener();
		while (listener.hasNext()) {
			Edge next = listener.next();

			MethodOrMethodContext src = next.getSrc();
			MethodOrMethodContext tgt = next.getTgt();
			canvas.drawNode(src.toString()
			// src.method().getJavaSourceStartLineNumber()
			);
			canvas.drawNode(tgt.toString()
			// +tgt.method().getJavaSourceStartLineNumber()
			);
			canvas.drawEdge(src.toString(), tgt.toString());

		}
		canvas.plot(fileName);
		return new File(fileName);
	}
}
