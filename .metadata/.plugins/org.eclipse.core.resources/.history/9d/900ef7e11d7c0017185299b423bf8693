target=concolic.DART

@using=jpf-core
@using=jpf-symbc


classpath=${jpf-symbc}/build/examples

sourcepath=${jpf-symbc}/src/examples

# analyze TestPaths.testMe(int x, boolean b) using symbolic values for 'x' and
# concrete value for 'b'
symbolic.method=concolic.DART.test(sym#sym)

symbolic.concolic=true

symbolic.debug=on

#symbolic.minreal=-10.0

#symbolic.maxreal=1000.0

#symbolic.minint=-1000

#symbolic.maxint=1000

#symbolic.heuristicRandom=true

# instruct jpf not to stop at first error
#search.multiple_errors=true

#listener = .symbc.SymbolicListener
#listener = .symbc.concolic.ConcreteExecutionListener
#vm.storage.class=nil

#jpf.report.console.finished=DART

#=========================TestMain============================
#symbolic.green=false

#symbolic.heuristicPartition=true

#not used if heuristicPartition is true
#symbolic.concolic.MAX_TRIES=3
#symbolic.dp=coral

#==================TestStatCal

#coverage.include=*.StatCalculator
#coverage.show_methods=true
#coverage.show_bodies=true

listener=gov.nasa.jpf.symbc.sequences.SymbolicSequenceListener,gov.nasa.jpf.symbc.SymbolicListener,.symbc.concolic.ConcreteExecutionListener 
#,gov.nasa.jpf.listener.CoverageAnalyzer

#================================from site
#search.class = .search.heuristic.BFSHeuristic

#search.depth_limit = 10

#symbolic.undefined=0

#symbolic.lazy=on

#An option to increase the time limit until which choco tries to solve a particular constraint
#choco.time_bound=30000 # default value is 30000


