This is Static information for building SPF dummyMain class::


1) "NORMAL" Method :: onStartCommand from Class:: uk.co.alt236.floatinginfo.service.FloatingInfoService

2) "NORMAL" Method :: startMonitor from Class:: uk.co.alt236.floatinginfo.service.FloatingInfoService

3) "NORMAL" Method :: start from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.GeneralInfoProvider

4) "NORMAL" Method :: startProcessMonitor from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.GeneralInfoProvider

5) "NORMAL" Method :: start from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask

6) "LISTENER" Method :: <init> in MonitorTask$1 that declares in start from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask

Find findViewById(#int) method in following code related to MonitorTask$1

Active Body of this Method in Jimple is::

    public void start(uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback)
    {
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask $r0;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback $r1;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$1 $r2;
        android.content.Context $r3;
        uk.co.alt236.floatinginfo.data.prefs.EnabledInfoPrefs $r4;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Void[] $r7;

        $r0 := @this: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask;

        $r1 := @parameter0: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback;

        $r2 = new uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$1;

        $r3 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: android.content.Context mContext>;

        $r4 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.prefs.EnabledInfoPrefs mEnabledInfoPrefs>;

        specialinvoke $r2.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$1: void <init>(uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask,android.content.Context,uk.co.alt236.floatinginfo.data.prefs.EnabledInfoPrefs,uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback)>($r0, $r3, $r4, $r1);

        $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask> = $r2;

        $r5 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask>;

        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r7 = newarray (java.lang.Void)[0];

        virtualinvoke $r5.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r6, $r7);

        return;
    }


7) "LISTENER" Method :: <init> in MonitorTask$InnerTask that declares in start from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask

Find findViewById(#int) method in following code related to MonitorTask$InnerTask

Active Body of this Method in Jimple is::

    public void start(uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback)
    {
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask $r0;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback $r1;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$1 $r2;
        android.content.Context $r3;
        uk.co.alt236.floatinginfo.data.prefs.EnabledInfoPrefs $r4;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask $r5;
        java.util.concurrent.Executor $r6;
        java.lang.Void[] $r7;

        $r0 := @this: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask;

        $r1 := @parameter0: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback;

        $r2 = new uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$1;

        $r3 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: android.content.Context mContext>;

        $r4 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.prefs.EnabledInfoPrefs mEnabledInfoPrefs>;

        specialinvoke $r2.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$1: void <init>(uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask,android.content.Context,uk.co.alt236.floatinginfo.data.prefs.EnabledInfoPrefs,uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$UpdateCallback)>($r0, $r3, $r4, $r1);

        $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask> = $r2;

        $r5 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask>;

        $r6 = <android.os.AsyncTask: java.util.concurrent.Executor THREAD_POOL_EXECUTOR>;

        $r7 = newarray (java.lang.Void)[0];

        virtualinvoke $r5.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>($r6, $r7);

        return;
    }


7) "LISTENER" Method :: <init> in MonitorTask$InnerTask that declares in stop from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask

Find findViewById(#int) method in following code related to MonitorTask$InnerTask

Active Body of this Method in Jimple is::

    public void stop()
    {
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask $r0;
        uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask $r1;

        $r0 := @this: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask;

        $r1 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask>;

        if $r1 == null goto label1;

        $r1 = $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask>;

        virtualinvoke $r1.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask: boolean cancel(boolean)>(1);

        $r0.<uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask: uk.co.alt236.floatinginfo.data.access.generalinfo.MonitorTask$InnerTask mTask> = null;

     label1:
        return;
    }


8) "NORMAL" Method :: <init> from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.inforeader.cpu.CpuUtilisationReader

9) "NORMAL" Method :: update from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.inforeader.cpu.CpuUtilisationReader

10) "NORMAL" Method :: parseFile from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.inforeader.cpu.CpuUtilisationReader

11) "NORMAL" Method :: parseCpuLine from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.inforeader.cpu.CpuUtilisationReader

12) "NORMAL" Method :: createCpuInfo from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.inforeader.cpu.CpuUtilisationReader

13) "NORMAL" Method :: update from Class:: uk.co.alt236.floatinginfo.data.access.generalinfo.inforeader.cpu.CpuInfo


